# wget -O common_commands https://raw.githubusercontent.com/boshk0/HiveOS_GPU_tunner/main/common_commands

# Setup machine
sudo apt update -y && sudo apt upgrade -y
sudo apt install gcc make nano nvtop btop -y

# Check latest Nvidia driver version
# https://www.nvidia.com/en-us/drivers/unix/

# Install Nvidia drivers
DRIVER_VERSION="565.57.01"
installer_file="NVIDIA-Linux-x86_64-${DRIVER_VERSION}.run"
installer_url="https://us.download.nvidia.com/XFree86/Linux-x86_64/${DRIVER_VERSION}/${installer_file}"
wget -O $installer_file $installer_url && sudo chmod +x $installer_file && sudo ./$installer_file

# Disable auto updates
sudo nano /etc/apt/apt.conf.d/20auto-upgrades
APT::Periodic::Update-Package-Lists "0";
APT::Periodic::Download-Upgradeable-Packages "0";
APT::Periodic::AutocleanInterval "0";
APT::Periodic::Unattended-Upgrade "0";

# Install Docker
# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add Nvidia runtime in /etc/docker/daemon.json

# Install Nvidia Container Toolkit
curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \
  && curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \
    sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
    sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
sudo apt-get update
sudo apt-get install -y nvidia-container-toolkit

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

# Use docker without root privileges
sudo groupadd docker
sudo usermod -aG docker $USER

# Docker cleanup
docker system prune

# VastAI machine ID
cat /var/lib/vastai_kaalia/machine_id

# Container info
cat /var/lib/vastai_kaalia/data/instance_extra_logs/C.15236320

# Check if Turbo Boost is disabled
cat /sys/devices/system/cpu/intel_pstate/no_turbo

# Disable Turbo Boost
echo 1 | sudo tee /sys/devices/system/cpu/intel_pstate/no_turbo

# Temporary listen on port (TCP)
nc -l 41001

# Check if a port is open and port forwarding is working (TCP)
# https://portchecker.co/check-it

# Temporary listen on port (UDP)
nc -u -l 41001

# From another machine, check if the port is open and port forwarding is working (UDP)
nc -u <public_ip> 41001

# View Journal log (most recent)
journalctl -e

# Show GPU related errors
journalctl -o short-precise -k -b -1 | grep -E "NVRM|AER|fallen"
sudo dmesg -T | grep -E "NVRM|AER|fallen"

# Show container logs
journalctl CONTAINER_NAME=$(docker ps --format "{{.Names}}" | head -1) -f

# Take snapshot of a tmux session
docker exec -it $(docker ps --format "{{.Names}}" | head -1) tmux capture-pane -p

# Take snapshot of a screen session
docker exec -it $(docker ps --format "{{.Names}}" | head -1) bash -c 'sid=$(screen -ls | awk "/\t/ {print \$1}"); screen -S "$sid" -X hardcopy -h /tmp/.x; cat /tmp/.x; rm /tmp/.x'

# Query local API hosted in container
docker exec -it $(docker ps --format "{{.Names}}" | head -1) wget -O - http://localhost:4444

# Check NVidia OC Monitor for recent changes
journalctl -e -u nvidia-oc-monitor -n 60 | grep "Setting"

# Get GPU vendor
lspci -vnn | grep VGA -A 11 | grep "Subsystem"

# Display NVidia Topology
nvidia-smi topo -m

# Cleanup docker images excluding the most common
docker rmi $(sudo docker image ls | grep -Ev "pytorch/pytorch.*|amazonaws.*|nvidia/cuda.*|ubuntu.*|runpod/stable-diffusion.*" | awk 'NR>1 {print $3}')
docker builder prune -f

# Show total/available disk space
df -h
