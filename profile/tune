# In the beginning we will work only with the first GPU
# Once we are ready with the tunning, we can implement the same for all the GPUs in the rig

gpu_id=2

echo Tunning GPU \#$gpu_id; nvidia-smi -i $gpu_id --query-gpu=name,clocks.max.sm,power.min_limit,power.max_limit --format=csv,noheader

# TODO: itterate the core clock rage from upper to lower

current_clock=0
current_efficiency=0
previous_efficiency=0

current_clock=1305

while :
do
  echo --------------------------------------------------------
  
  nvidia-smi -i $gpu_id -lgc $current_clock

# TODO: Take samples of the efficiency every 10 minutes and compare current to the previous sample, continue if it's lower

  for i in {1..10}
  do
    sleep 60

    #stats
    curl --silent localhost:20000 -X '{"id":"0", "method":"getstat"}' | jq -c '.result[2] | {gpuid: .gpuid, name: .name, clock: .gpu_clock_core_max, power: .gpu_power_usage, efficiency0: (.speed_sps0 / .gpu_power_usage), efficiency: (.speed_sps / .gpu_power_usage), efficiency0: (.speed_sps0 / .gpu_power_usage) }'
  done

  echo $(date)
  
  # Make the efficiency an integer (eg 0.5673453 becomes 5673)
  current_efficiency=$(curl --silent localhost:20000 -X '{"id":"0", "method":"getstat"}' | jq '.result[$gpu_id] | (.speed_sps / .gpu_power_usage)*10000' | { read -r var; echo "$var/1"; } | bc)

  if [ $current_efficiency -gt $previous_efficiency ]
  then
    current_clock=$(( current_clock - 15 ))
  else
    echo "Best efficiency found."
    break
  fi

  previous_efficiency=$current_efficiency
done

echo Best efficiency found: $current_efficiency Sol/s at $current_clock Mhz

#TODO: Revert back to the original core clock
/profile/apply


