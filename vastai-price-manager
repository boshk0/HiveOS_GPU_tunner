#!/bin/bash

host_id=81587
end_date='7 May 2024 15:00' # Subtracted 3 hours for Local time
discount=0.01
min_price=0.4
records=3

get_available_machines() {
    readarray -t available_machines < <(vastai search offers 'host_id='$host_id' rentable=False' -n --disable-bundling | awk 'NR>1 {gsub(/x$/, "", $3); print $17,>
}

retrieve_average_price() {
    local n_gpus=$1

    # Set the search criteria for available offers
    search_criteria="gpu_name=RTX_4090 num_gpus="$n_gpus" host_id!="$host_id" inet_up>=100 reliability>=0.90 duration>3"

    #vastai search offers "$search_criteria" -o dph

    # Execute the vastai search with the given criteria
    # Sort offers by dollars per hour and disable bundling
    # then, pass the output through awk for processing
    average_price=$(vastai search offers "$search_criteria" -o dph | awk '
        BEGIN {
            # Initialize variables to store the total and count of relevant offerings
            total=0
            count=0
        }
        NR>1 && NR<='$((records+1))' {
            # Take first few records, accumulate the Price values and increment count
            total += $9
            count++
        }
        END {
            printf total/count/'$n_gpus'
        }'
    )

    adjusted_price=$(printf "%.6f" $(echo "$average_price - $discount" | bc -l))
    total_price_avg=$(printf "%.6f" $(echo "$average_price * $n_gpus" | bc -l))
    total_price_adj=$(printf "%.6f" $(echo "$adjusted_price * $n_gpus" | bc -l))

    echo "Average Price: $average_price, Total Price: $total_price_avg"
    echo "Adjusted Price: $adjusted_price, Total Price: $total_price_adj"
}

# Set adjusted price
update_vastai_price() {
    local mach_id=$1
    local n_gpus=$2
    local price_gpu=$3
    local unix_date=$(date -d "$end_date" +%s)

    # Check if the price is below the minimum threshold
    if (( $(echo "$price_gpu < $min_price" | bc -l) )); then
        echo "Adjusted price too low, skipping price update"
        return
    fi

    # Set price in VastAi
    vastai list machine $mach_id --price_gpu $price_gpu --price_disk 0.4 --price_inetu 0.0048828125 --price_inetd 0.0048828125 --discount_rate 0 --min_chunk $n_gp>
}

set_prices() {
    local mach_id
    local n_gpus

    # Iterating over the array
    for i in "${available_machines[@]}"
    do
        # Splitting each element into number and status
        read mach_id n_gpus <<< "$i"

        retrieve_average_price $n_gpus
        sleep 5

        update_vastai_price $mach_id $n_gpus $adjusted_price
        sleep 5
    done
}

get_available_machines

set_prices
